<?xml version="1.0" encoding="UTF-8"?>
<project name="instinct" default="all" basedir=".">

    <import file="build-setup.xml"/>
    <import file="build-quality.xml"/>

    <taskdef resource="tasks.properties" classpathref="test.class.path"/>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <!--<target name="all" depends="clean,dist,test"/>-->
    <target name="all" depends="clean,dist,atomic-test,javadoc"/>
    <target name="compile" depends="clean,checkstyle,-compile"/>
    <target name="dist" depends="clean,compile,-dist"/>
    <target name="test" depends="clean,-test"/>
    <target name="javadoc" depends="clean,-javadoc"/>

    <target name="atomic-test" depends="-instrumented_compile">
        <test.macro type="atomic"/>
    </target>

    <target name="slow-test" depends="-instrumented_compile">
        <test.macro type="slow"/>
    </target>

    <target name="-test" depends="atomic-test,slow-test"/>

    <target name="-javadoc" depends="-compile">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc destdir="${javadoc.dir}" author="true" version="true"
                packagenames="${main.package.name}.*" sourcepath="${main.src.dir}" classpathref="main.class.path" failonerror="true"
                additionalparam="-breakiterator" Use="true" source="${java.src.version}" excludepackagenames="${main.package.name}.internal.*"
                windowtitle="${project.longname} ${project.version.full}" doctitle="${project.longname} ${project.version.full}">
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
        </javadoc>
    </target>

    <target name="-compile">
        <compile.macro src.dir="${main.src.dir}" classpath.ref="main.class.path" output.dir="${main.classes.dir}"
                code.path="main.code.path" code.pattern="all.code.pattern"/>
        <compile.macro src.dir="${test.src.dir}" classpath.ref="test.class.path" output.dir="${test.classes.dir}"
                code.path="test.code.path" code.pattern="all.code.pattern"/>
        <!--<copy todir="${main.classes.dir}">-->
        <!--<fileset dir="${main.src.dir}" includes="**/application-context.xml"/>-->
        <!--</copy>-->
    </target>

    <target name="-dist">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${project.jar}">
            <fileset dir="${main.classes.dir}"/>
        </jar>
    </target>

    <target name="-instrumented_compile" depends="-compile">
        <mkdir dir="${coverage.dir}"/>
        <mkdir dir="${coverage.instrumented.dir}"/>
        <copy todir="${coverage.instrumented.dir}">
            <fileset dir="${main.classes.dir}"/>
        </copy>
        <cobertura-instrument todir="${coverage.instrumented.dir}" datafile="${coverage.dir}/coverage.ser">
            <fileset dir="${main.classes.dir}">
                <include name="**/*.class"/>
                <exclude name="**/instinct/example/**"/>
                <exclude name="**/integrate/junit/**"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <macrodef name="test.macro">
        <attribute name="type"/>
        <sequential>
            <mkdir dir="${@{type}.test.results.dir}"/>
            <junit failureproperty="@{type}.test.failed" fork="true" forkmode="perBatch">
                <classpath refid="@{type}.test.class.path"/>
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${coverage.dir}/coverage.ser"/>
                <batchtest todir="${@{type}.test.results.dir}">
                    <fileset refid="@{type}.test.code.fileset"/>
                </batchtest>
                <formatter type="xml"/>
                <formatter type="brief" usefile="false"/>
            </junit>
            <fail if="@{type}.test.failed" message="@{type} tests failed."/>
            <macro_cobertura_report/>
        </sequential>
    </macrodef>

    <macrodef name="compile.macro">
        <attribute name="src.dir"/>
        <attribute name="output.dir"/>
        <attribute name="classpath.ref"/>
        <attribute name="code.path"/>
        <attribute name="code.pattern"/>
        <attribute name="compiler.args" default="-Xlint"/>
        <sequential>
            <mkdir dir="@{output.dir}"/>
            <javac source="${java.src.version}" srcdir="@{src.dir}" destdir="@{output.dir}" classpathref="@{classpath.ref}" debug="${compile.debug}"
                    debuglevel="${compile.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
                <src>
                    <path refid="@{code.path}"/>
                </src>
                <patternset refid="@{code.pattern}"/>
                <compilerarg value="@{compiler.args}"/>
            </javac>
        </sequential>
    </macrodef>

</project>

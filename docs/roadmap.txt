Instinct is a Behaviour Driven Development (BDD) framework for Java. Inspired by RSpec, Instinct provides flexible
annotation of contexts, specifications, mocks, etc. (via Java 1.5 annotations, marker interfaces or naming conventions);
automatic creation of mocks, stubs, test subjects & unique fields; a verification API (similar to JUnit's Assert);
unique utilities; and JUnit test runner integration.


Implementation Plan
o Implement core annotations (context, specification)
o Implement suite aggregator
o Get example code working
o Auto mocking
o Auto unique field creation
o Auto fixture/subject creation
o Come up with nomenclature (see terms.txt)

Core Features
o Should allow the use of annotation, naming conventions or interfaces (markers) to mark things.
o Built in framework support for nomenclature: mocks, stubs, etc.
o IntelliJ IDEA plugin.
o Support for JUnit runners.

Testing
o Allow/encourage more than one Context per class file
o Provide UniqueTestUtil functionality, @Unique annotation & naming convention
o Create a Verify class similar to Assert. This will allow static access to the checks (so that this just becomes a wrapper).
o Context classes should not need to have a siffix "Context".
o Provide closure style assertThrows checks.

Mocking
o Bundle a mocking library - probably easymock
o Use boost auto mocker or DI-based
  o Support automocking using an annotation (@Mock) and naming convention
o Possibly allow different mock types - nice, stubs, etc.

Annotations to Create
o Use @BehaviourContext annotation to denote context classes.
o Include an @Fixture annotation to support auto creation of fixtures where able to.
  o If fixtures depend on mocks, use the mock types where possible
  o Perhaps have conditions places on the fixtures to denote how they should be created
    @Fixture(dependencies=AUTO_MOCK,AUTO_UNIQUE)

Naming Conventions
o Unique fields (also want to be able to specify conditions, e.g. positive int, ranges, etc.)
o Mocked fields (a mock that is verified)
o Stub fields (just an instance)
o Fixtures

Aggregation
o Hook into junit style runners for IDE integration - should find
o How do you run an individual BehaviourContext in an IDE? Do we need to write a plugin?
o May need a plugin to run tests individually (steal code from TestNG plugin - http://code.google.com/p/testng-idea/).

Functionality
o Allow "naming conventions" to be added (discover these at runtime to extend functionality).
o Need some way to discover what methods to run for non-annotated classes. Provide a naming convention to do this.
o Only use mocks for seting expectations on (will be able to provide framework level support for this distinction).
o For classes with annotations, may not want to also add in specification methods discovered by naming conventions.

Test Strategy
o Determine how to automatically test core code against example code (maybe seperate classloader). This could form a
  "compatibility" suite.